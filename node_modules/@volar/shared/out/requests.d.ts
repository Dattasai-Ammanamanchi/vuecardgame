import type * as vscode from 'vscode-languageserver';
export declare namespace PingRequest {
    const type: vscode.RequestType0<'pong' | null | undefined, any>;
}
export declare namespace VSCodeContentRequest {
    const type: vscode.RequestType<string, string, any>;
}
export declare namespace D3Request {
    const type: vscode.RequestType<vscode.TextDocumentIdentifier, string | null | undefined, any>;
}
export declare namespace TagCloseRequest {
    const type: vscode.RequestType<vscode.TextDocumentPositionParams, string | null | undefined, any>;
}
export declare namespace RefCloseRequest {
    const type: vscode.RequestType<vscode.TextDocumentPositionParams, string | null | undefined, any>;
}
export declare namespace DocumentVersionRequest {
    const type: vscode.RequestType<{
        uri: string;
    }, number | undefined, any>;
}
export declare namespace ActiveSelectionRequest {
    const type: vscode.RequestType0<{
        uri: string;
        offset: number;
    } | undefined, any>;
}
export declare namespace VerifyAllScriptsRequest {
    const type: vscode.RequestType<undefined, undefined, any>;
}
export declare namespace WriteVirtualFilesRequest {
    const type: vscode.RequestType<{
        lsType: 'template' | 'script';
    }, undefined, any>;
}
export declare namespace RestartServerNotification {
    const type: vscode.NotificationType<undefined>;
}
export declare namespace ShowReferencesNotification {
    const type: vscode.NotificationType<{
        uri: vscode.DocumentUri;
        position: vscode.Position;
        references: vscode.Location[];
    }>;
}
export declare namespace GetServerNameCasesRequest {
    const type: vscode.RequestType<vscode.TextDocumentIdentifier, {
        tag: 'both' | 'kebabCase' | 'pascalCase' | 'unsure';
        attr: 'both' | 'kebabCase' | 'pascalCase' | 'unsure';
    } | null | undefined, any>;
}
export declare namespace GetClientAttrNameCaseRequest {
    const type: vscode.RequestType<vscode.TextDocumentIdentifier, 'kebabCase' | 'pascalCase', any>;
}
export declare namespace GetClientTarNameCaseRequest {
    const type: vscode.RequestType<vscode.TextDocumentIdentifier, 'both' | 'kebabCase' | 'pascalCase', any>;
}
export declare namespace TsVersionChanged {
    const type: vscode.NotificationType<string>;
}
export declare namespace UseWorkspaceTsdkChanged {
    const type: vscode.NotificationType<boolean>;
}
export declare namespace RemoveAllRefSugars {
    const type: vscode.NotificationType<undefined>;
}
